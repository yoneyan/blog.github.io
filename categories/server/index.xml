<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>server on のんびりと生きたい</title>
    <link>https://yoneyan.dev/categories/server/</link>
    <description>Recent content in server on のんびりと生きたい</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 11 Aug 2019 23:56:52 +0900</lastBuildDate>
    
	<atom:link href="https://yoneyan.dev/categories/server/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CentOSで無線を有線に変換する(2)</title>
      <link>https://yoneyan.dev/post/convert-wireless-to-wired-with-centos_2/</link>
      <pubDate>Sun, 11 Aug 2019 23:56:52 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/convert-wireless-to-wired-with-centos_2/</guid>
      <description>CentOSを使って無線を有線にしなければならないことができたので、備忘録として書きます。
構築 APから飛ばしたものをCentOS RouterでIPマスカレードし、Clientから体外にアクセスできるようにします。
前提条件として
WLAN側：DHCP（ここでは、172.16.100.100がDHCPより取得したと仮定する）
LAN側：172.16.200.1&amp;frasl;24
WLANインターフェース:wlp2s0
LANインターフェース:eth0
とします。
1．無線側の設定 1.1．WLAN側インターフェースを確認する NetworkManagerのデバイスを一覧で出してみます。
 nmcli device  とすると、
 DEVICE TYPE STATE CONNECTION --------------------------------------------- eth0 ethernet disconnected　-- wlp2s0 wifi disconnected　--  wlp2s0がunmanagedになっている場合は、nmcliで無線がunmanagedの場合の対処法 こちらに対処法を記事にしたのでご覧ください。
1.2．WLANのSSIDを設定する nmcli device wifi connect [ssid] password [password]  [ssid]にWiFiのSSIDを、[password]にはSSIDに対するパスワードを入力してください。
2．有線側の設定 2.1．IPアドレスを固定で設定する nmcli connection modify eth0 ipv4.method manual nmcli connection modify eth0 ipv4.addresses &amp;quot;172.16.200.1/24&amp;quot;  172.16.200.1/24の部分にLAN側のIPアドレスを記入します。
2.2．DHCPサーバを構築する DHCPサーバをインストールする
yum -y install dhcp  /etc/dhcp/dhcpd.conf</description>
    </item>
    
    <item>
      <title>nmcliで無線がunmanagedの場合の対処法</title>
      <link>https://yoneyan.dev/post/what-to-do-if-the-radio-is-unmanaged-with-nmcli/</link>
      <pubDate>Sun, 11 Aug 2019 23:29:40 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/what-to-do-if-the-radio-is-unmanaged-with-nmcli/</guid>
      <description>nmcliで無線LANの設定がなかなかできなかったので、ここでは簡単に対処法を書きます。
ここでは無線LANをWLANと記述します。
確認してみる nmcli device  より、WLANの管理状態を確かめてみます。
 DEVICE TYPE STATE CONNECTION --------------------------------------------- eth0 ethernet connected eth0 wlp2s0 wifi unmanaged --  とこのようにWLANだけ管理されていない状況になっていることがわかります。
このような場合は、NetworkManagerのWifiを管理するNetworkManager-wifiを入れる必要があります。
yum -y install NetworkManager-wifi  このパッケージを導入してから
nmcli d wifi nmcli d nmcli connection  を実行してから、しっかりと周りのwifiが見えていれば成功です！！
失敗例 nmcli device set wlp2s0 managed yes  とこのコマンドを実行すると、一見有効になってように見えます。
しかし、
nmcli d wifi  としてもなにも帰ってこないので、 networkmanager-wifiパッケージが入っていないのがおそらく原因で無理なのだと思われます。</description>
    </item>
    
    <item>
      <title>virt-install時にbr0のエラーが出て進まない</title>
      <link>https://yoneyan.dev/post/br0-error-does-not-appear-during-virt-install/</link>
      <pubDate>Wed, 31 Jul 2019 21:58:46 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/br0-error-does-not-appear-during-virt-install/</guid>
      <description>環境 OS: CentOS7 7.6.1810
Bridge: br0 (eth0をbr0にブリッジで接続している)
起こったこと virt-installのコマンドを走らせた際にbridge関連のエラーが出たので対処法をこちらに載せます。
virt-install --name centos7 --ram 4096 --disk /mnt/data/images/centos7.img --vcpus 2 --os-type linux --os-variant rhel7 --network bridge=br0 --graphics none --console pty,target_type=serial --location &#39;http://ftp.iij.ad.jp/pub/linux/centos/7/os/x86_64/&#39; --extra-args &#39;console=ttyS0,115200n8 serial&#39;  上記のようにvirt-installを行うと、
Starting install... Retrieving file vmlinuz... | 6.3 MB 00:00:00 Retrieving file initrd.img... | 50 MB 00:00:02 ERROR internal error: /usr/libexec/qemu-bridge-helper --use-vnet --br=br0 --fd=26: failed to communicate with bridge helper: Transport endpoint is not connected stderr=access denied by acl file  このようなエラーメッセージを吐きました。</description>
    </item>
    
    <item>
      <title>apcupsdで自動シャットダウンをできるようにする</title>
      <link>https://yoneyan.dev/post/enable-automatic-shutdown-with-apcupsd/</link>
      <pubDate>Tue, 30 Jul 2019 01:52:07 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/enable-automatic-shutdown-with-apcupsd/</guid>
      <description>apcupsdとは APC製のUPSにつながれたサーバ機器を安全にシャットダウンされるように作られたアプリケーションです。
また、このアプリケーションを使うことで複数台のサーバ機器を同時にシャットダウン出来ることも特徴の一つです。
構成 構成としてこのようになっています。
SmartUPS 500につながっているもの
 TX1310 M1 ( ADサーバ Windows Server 2019 Standard) Fujitsu W510 ( 録画サーバ Windows 10)  この２台サーバ機器がつながっています。
UPSとサーバ機器にはUSB経由でTX1310 M1に接続されています。
TX1310 M1をマスターとして運用します。
今回はUPSとサーバ間はUSBで接続するという条件で記事を執筆していきます。
構築 マスター側の設定 １．apcupsdをダウンロード・インストールする http://www.apcupsd.org/
   apcupsdダウンロード
リンクからWindows版をダウンロードします。
ダウンロードした後は、インストールしてください。
２．ドライバを入れる    ドライバインストール前
ドライバを入れ替える必要があるので、更新します。
   ドライバの更新からコンピューターを参照してドライバーソフトウェアを検索をすると、
   ドライバ更新
このような画面が出てくるので、ドライバが入っているフォルダを選択し、次へとすると、自動更新がかかります。
   ドライバ更新後
ドライバを更新すると(Apcupsd) となります。
３．apcupsdの設定をする    start menu  Edit Configuration fileという項目から設定ファイルを変更します。</description>
    </item>
    
    <item>
      <title>nginxでリバースプロキシとLet&#39;s Encryptを導入する</title>
      <link>https://yoneyan.dev/post/introducing-reverse-proxy-and-letsencrypt-with-nginx/</link>
      <pubDate>Tue, 04 Jun 2019 19:03:13 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/introducing-reverse-proxy-and-letsencrypt-with-nginx/</guid>
      <description>nginxでLet&amp;rsquo;s Encryptを用いてhttps（SSL/TLS）を有効にする方法をこちらに書いていきます。
当方のLet&amp;rsquo;s Encryptの記事は備忘録と書きます。他社のサイトさんの方がわかりやすいと思うので、わからない点などがあれば調べていただければ幸いです。
今回はリバースプロキシを使用します。
リバースプロキシの設定 １．configを作成する /etc/nginx 上にnginxのいろんな設定ファイルがあります。
特に、nginxのメインとなる主の設定ファイルとなるのが/etc/nginx/nginx.confです。
ですが、このファイルを直接弄ってしまうとわかりにくいという問題が起きるので今回は/etc/nginx/conf.d/以下のファイルを新たに作成します。
/etc/nginx/conf.d/[好きな名前].conf
server{ server_name example.net; listen 80; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-Host $host; proxy_set_header X-Forwarded-Server $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; location /test1/ { proxy_pass http://localhost:8080/; } location /test2/ { proxy_pass http://localhost:3000/; } }  ２．動いているか確認する systemctl restart nginx  nginxを再起動させて、リバースプロキシが働いてくれているか確認します。
Let&amp;rsquo;s Encryptの設定 ０．Let&amp;rsquo;s Encryptで必要なものを入れる yum -y install epel-release yum -y install certbot  certbotというものが必要となるので、インストールします。
１．証明書を取得する certbotを使って取得します。
certbot certonly --standalone  ２．設定に追加する certbotを実行することで、</description>
    </item>
    
    <item>
      <title>Linuxのディスク容量拡張の方法</title>
      <link>https://yoneyan.dev/post/linux-disk-capacity-expansion-method/</link>
      <pubDate>Mon, 03 Jun 2019 13:59:36 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/linux-disk-capacity-expansion-method/</guid>
      <description>UbuntuServerのディスクの容量を拡張する必要が出てきたので、ここに備忘録として残していきます。
VPSを使っていると、スケールアップなどで容量が拡張してくれるものがあります。しかし、ディスクとしては拡張されていても最初から入っているパーティションが勝手に伸びたり縮んだりすることが出来ないので我々が操作をしてあげないといけません。
前提条件 /dev/sda2のパーティションの容量を拡張するという想定で拡張の方法を書いていきます。
0．partedが入っていない場合はインストールする partedは標準のLinuxOSでは入っている場合が多いですが、実際に入っていない場合もあるかもしれないので、その場合入れてあげます。
debian系
apt install parted  RedHat系
yum install parted  これで、パーティションツールを入れることができます。
１．partedから容量を拡張する sudo parted print all # /dev/sdaを選択する select /dev/sda # /dev/sdaのパーティションの構成をみる print /dev/sda # パーティション2をリサイズする resizepart 2  「End 400G 」100%とすることで、最大容量まで拡張できます。
最後に/dev/sdaの容量を見てみます。
print /dev/sda  2．実容量を拡張する df -h  これでマウント中の容量を見ることができます。
そうすると実容量が拡張されていないため、resize2fs というコマンドを使っていきます。
sudo resize2fs /dev/sda2  もちろんですが、root権限が必要です。
３．容量を確認する df -h  これで/dev/sda2の部分の容量が拡張されているのかを確認してください。</description>
    </item>
    
    <item>
      <title>TX1310 M1でホットスワップが出来ない</title>
      <link>https://yoneyan.dev/post/cannot-hotswap-with-tx1310_m1/</link>
      <pubDate>Sun, 19 May 2019 20:48:06 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/cannot-hotswap-with-tx1310_m1/</guid>
      <description>ずっと、お家にお眠りなさってたTX1310 M1を最近、Windows10でも入れてリモートアクセス専用PCとして使おうとすると、いろいろ問題が起きたので備忘録＋なんとかする方法をこちらに書かせていただきます。
何が出来ないのか？ 本来、この機器ではホットスワップには対応していないのですが、大体のAHCIで動いてるシステムは使えるはずなのですが、使えない。
しかも、ホットスワップ出来ないだけだと不便だけで済みますが、記憶域プールが謎のエラーを吐いて、作成出来ないのが致命的です。
また、問題はWindows 10だけではなく、Linuxでもホットスワップ出来ませんでした。
対処法 ドライバを入れてあげます。
1．チップセットドライバを入れてあげる 一応、Intelの公式にチップセットドライバというものがあるので、それをダウンロードしてインストールしてあげます。
https://downloadcenter.intel.com/ja/download/28710/Intel-Server-Chipset-Driver-for-Windows-?v=t
こちらから.exe形式のファイルをダウンロードして、インストールします。
2．AHCI、SATAコントローラーのドライバを入れてあげる これが一番重要になってきます。
https://support.lenovo.com/jp/ja/downloads/ds101491
こちらから.exe形式のファイルをダウンロードし、起動させると、Cドライブ直下にDriverというファイルが出来るので、そこからインストールします。
まとめ これにより、TX1310 M1でホットスワップが出来るようになりました。
TX100 S3の場合だと、標準ドライバでも可能でしたがこの機種の場合では、ドライバを入れてあげないといけないので注意が必要です。</description>
    </item>
    
    <item>
      <title>CentOS7でLACPとタグVLANを使ってみる</title>
      <link>https://yoneyan.dev/post/try-using-lacp-and-tagged-vlan-on-centos7/</link>
      <pubDate>Sun, 31 Mar 2019 20:02:44 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/try-using-lacp-and-tagged-vlan-on-centos7/</guid>
      <description>当方の環境で使っているCentOS7でLACPとタグVLANを使う必要が出てきたのでその際に方法をここに備忘録として書きます。
環境 CentOS=========L3 Switch(vlan10,vlan20)
2つのLANケーブルを使って、LACPでリンクアグリゲーションを組みます。
CentOS側のNIC：eth0,eth1
設定する １． いらないものを排除する systemctl stop NetworkManager systemctl disable NetworkManager  NetworkManagerが邪魔になるので、停止＆無効にします。
２．bonding機能を有効にする modprobe bonding  これをしないと、リンクアグリゲーションができないので、忘れずに実行して下さい。
３．コンフィグを書いていく 3.1．bond0の設定 vi /etc/sysconfig/network-scripts/ifcfg-bond0  DEVICE=bond0 NAME=bond0 TYPE=Bond ONBOOT=yes BOOTPROTO=none BONDING_OPTS=&amp;quot;downdelay=0 miimon=100 mode=802.3ad updelay=0&amp;quot; BONDING_MASTER=yes  3.2．LAGにするインタフェースの設定 vi /etc/sysconfig/network-scripts/ifcfg-eth0  DEVICE=eth0 TYPE=Ethernet BOOTPROTO=none ONBOOT=yes NM_CONTROLLED=no IPV6INIT=no MASTER=bond0 SLAVE=yes  これでeth0は完了です。次にeth1の設定をしていきます。
vi /etc/sysconfig/network-scripts/ifcfg-eth1  DEVICE=eth1 TYPE=Ethernet BOOTPROTO=none ONBOOT=yes NM_CONTROLLED=no IPV6INIT=no MASTER=bond0 SLAVE=yes  3.3．Bond0に対するTagVLANの設定 VLAN10の設定
vi /etc/sysconfig/network-scripts/ifcfg-bond0.10  TYPE=&amp;quot;Ethernet&amp;quot; BOOTPROTO=none DEVICE=&amp;quot;bond0.</description>
    </item>
    
    <item>
      <title>LinuxでRAID構築する際にリビルドが遅すぎる時の対処法</title>
      <link>https://yoneyan.dev/post/what-to-do-when-rebuilding-is-too-slow-when-building-raid-on-linux/</link>
      <pubDate>Sun, 31 Mar 2019 15:17:42 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/what-to-do-when-rebuilding-is-too-slow-when-building-raid-on-linux/</guid>
      <description>CentOSで1TBのHDDをRAID1に構築する際にかなり時間が掛かりそうだったので、対処法の紹介です。
http://liliumrubellum.blog10.fc2.com/blog-entry-300.html
上のブログさんの記事を参考にしました。（ほぼ、同じです。）
備忘録として、こちらに書かせていただきます。
どれくらいの時間がかかるのか cat /proc/mdstat  と実行すると、RAID状況を確認できます。
改善前 Personalities : [raid1] md0 : active raid1 sdc1[1] sdb1[0] 976628736 blocks super 1.2 [2/2] [UU] [&amp;gt;....................] resync = 2.1% (21226880/976628736) finish=1186.8min speed=13416K/sec bitmap: 8/8 pages [32KB], 65536KB chunk  13M/secはあまりにも遅すぎるので、これをなのとかします。
改善後 Personalities : [raid1] md0 : active raid1 sdc1[1] sdb1[0] 976628736 blocks super 1.2 [2/2] [UU] [&amp;gt;....................] resync = 4.2% (41735552/976628736) finish=292.9min speed=53181K/sec bitmap: 8/8 pages [32KB], 65536KB chunk  改善後はかなり速度が上がりました。</description>
    </item>
    
    <item>
      <title>VPSでスワップ領域を増やす</title>
      <link>https://yoneyan.dev/post/increase-swap-space-with-vps/</link>
      <pubDate>Tue, 05 Feb 2019 05:08:54 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/increase-swap-space-with-vps/</guid>
      <description>VPSで格安のものになってくると、問題となってくるのがスペックになります。
昔のVPSに比べると、メモリが512MBに増えておりかなり使えるものになってきましたが、それでも不足してしまうという現実があります。
そこで、気休め程度になってしまいますが、スワップ領域を増やしてみました。
１．確認する 最初にSWAP領域があるかないか調べるために以下のコマンドを実行します。
free -m  total used free shared buff/cache available Mem: 481 158 104 0 218 310 Swap: 0 0 0  当方のVPSではこのようになっていました。
Memがお分かりの通り、実メモリです。
Swapがスワップ領域です。
Total 0となっていると、その領域は存在しないという意味です。
２．スワップ領域を作る dd if=/dev/zero of=/swapfile bs=1M count=4096  ３．適応させていく 3.1.スワップの権限を変更する chmod 600 /swapfile  3.2.スワップを適応する mkswap /swapfile swapon /swapfile  ４．スワップを恒久化する この操作を行わないと再起動で元通りになってしまうので、次回以降の起動のためにこれから設定していきます。
HDDのマウントなどで使われるfstabに追記していきます。
/etc/fstabを開き、以下のものを最下位に追記します。
#Swap Area /swapfile swap swap defaults 0 0  これでスワップ領域の設定が完了します。
まとめ このような方法でスワップ領域を簡単に作ることができます。
メモリ不足の根本的な対策は違うプランにして増やすべきですが、私のようにお金がないやほかの諸々の事情がある場合はこれで乗り切れると思います。
今回はこれで以上です。</description>
    </item>
    
    <item>
      <title>openstackを構築していくpart1</title>
      <link>https://yoneyan.dev/post/building-openstack-part1/</link>
      <pubDate>Wed, 12 Dec 2018 21:53:06 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/building-openstack-part1/</guid>
      <description>openstackを自力で一から頑張って構築していこうという試みを始めます。
検証目的の場合であれば、centosのpackstackのような自動インストールツールを使うべきです。 実用的な運用を目指していこうという主旨の上でやっていきます。
筆者自身も構築途中ということもあり、時間をかけて記事を出していく予定なので、よろしくお願いします。
注意：わからなくなり断念する可能性がありますが、ご了承のほどお願いします。
Part1ではopenstackの構造を わかった範囲 で説明させていただきます。
openstackの特徴 そもそもopenstackの特徴として、IaaS(Infrastructure as a Service)の環境を自分たちでも簡単に構築できる点です。
また、openstackにはコンポーネントというものがあり、イメージファイルを管理するGlanceやユーザ情報を管理しているKeystoneなどのように機能別に分かれているのが特徴です。
コンポーネントに分ける利点として、一つのサービスが止まってもすべてが死なないだろうという考えがあるからです。
一つ死んだらまずいんじゃね？と言われるとその通りですが、少しでもサービスの全停止を防ぐためという目的があるからです。
openstackの構築形式 openstackの構築の形式として、以下の2つがあります。
 すべてのコンポーネントを一台のサーバーに導入する(All in one) コンポーネントをノードごとにサーバーに分けて導入する  前者の一台のサーバーにすべてのコンポーネントを導入する方法はあまり、おすすめできません。ノードごとにサーバーを分けてコンポーネントを導入する方法を推奨します。
理由として、All in oneで設計してしまうと、物理的にサーバーが故障した場合に対処しづらい点があるからです。
各ノードごとに分けて構築していると、死んだサーバーのノードのみを復旧できるからです。それにより、リスク回避ができます。すべてのサービスが瞬時に使えなくなるということがなくなるという利点があるからです。
これらによって、各ノードごとにコンポーネントを分けてサーバーに導入するのをおすすめしています。
主なコンポーネント(絶対に必要なもの）  Keystone Nova Glance Neutron Horizon Cinder Swift(必須ではない)  この上記のコンポーネントが必須となります。重要なものなので、一応リストに入れておきました。
各コンポーネントの紹介はこれからやっていきます。
Keystone Keystoneとはそれぞれのコンポーネントに対するユーザや認証情報を管理しています。
openstackでややこしくなるところでもあります。
プロジェクトやユーザ情報などを登録します。ユーザごとに権限を割り当てることができるのでopenstackの根幹に関わる重要なコンポーネントです。
Nova Novaとはコンピュートノードで使われています。
仮想マシンの作成や起動などの制御に使われている。
KVMなどの仮想マシンを操作するコンポーネントと思っていただいても大丈夫です。
仮想マシンを管理するものであって仮想マシンではないので、注意してください。
Glance isoデータなどの仮想ディスクイメージを管理しているコンポーネントです。
isoデータのみではなく、vdiやvhdなどのVMイメージなどの保存などを提供しています。
Neutron ネットワークを管理しているコンポーネントです。
L2やL3スイッチのネットワークを作成することが可能になります。
Horizon WebGUIを管理しているコンポーネントです。
まさに、このようなWebGUIを提供するためのものです。
Cinder 永続的なデータを提供するコンポーネントです。
VMとつなげて、提供するということもありVM上で使用するストレージを管理するというふうに筆者は思っています。（間違っていたら、コメント下さい
Swift 分散型のストレージサービスを提供するコンポーネントです。
また、REST APIでアクセスをさせるのでVMが起動・停止にかかわらずアクセスできる点がメリットです。画像ファイルやログファイルを保存するのに特化しています。
まとめ このように必須のコンポーネントだけでもこれだけあります。なかなかややこしいのが現状です。この回ではopenstackを構築していく上での基本事項を紹介させていただきました。 次回のPart2からいよいよ闇の構築をしていきます</description>
    </item>
    
    <item>
      <title>CentOSで無線から有線に変換する(1)</title>
      <link>https://yoneyan.dev/post/convert-wireless-to-wired-with-centos_1/</link>
      <pubDate>Tue, 20 Nov 2018 14:06:55 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/convert-wireless-to-wired-with-centos_1/</guid>
      <description>諸事情でどこかのイベントでバックボーンを構築をする際に無線から有線に変換する必要性が出てきたので、この記事ではその方法を紹介します。 トポ図 ルータ &amp;lt;&amp;mdash;&amp;mdash;&amp;mdash;-&amp;gt; CentOS &amp;lt;&amp;mdash;&amp;mdash;&amp;mdash;-&amp;gt; Client External Internal External(eth1),Internal(eth0)
設定をしてみる 1.firewallコマンド eth0をInternalゾーン
firewall-cmd --zone=internal --change-interface=eth0  eth1をExternalゾーン
firewall-cmd --zone=external --change-interface=eth1  永続化する時は、&amp;ndash;permanentをつけるといけます。
2.IPマスカレード firewall-cmd --zone=external --add-masquerade --permanent firewall-cmd --reload firewall-cmd --zone=external --query-masquerade cat /proc/sys/net/ipv4/ip_forward（「1」であれば有効） firewall-cmd --zone=internal --add-masquerade --permanent firewall-cmd --direct --add-rule ipv4 nat POSTROUTING 0 -o eth1 -j MASQUERADE firewall-cmd --direct --add-rule ipv4 filter FORWARD 0 -i eth0 -o eth1 -j ACCEPT firewall-cmd --direct --add-rule ipv4 filter FORWARD 0 -i eth1 -o eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT  3.</description>
    </item>
    
    <item>
      <title>CentOSでリンクアグリゲーションの設定をしてみる</title>
      <link>https://yoneyan.dev/post/try-setting-linkaggregation-on-centos/</link>
      <pubDate>Mon, 19 Nov 2018 01:29:33 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/try-setting-linkaggregation-on-centos/</guid>
      <description>今回はCentOSでIEEE 802.3ad規格のリンクアグリゲーションを構築してみます。 IEEE 802.3adとは国際で定められたリンクアグリゲーションの規格のことを指します。 この記事ではここからLAGと表記していきます。 この記事ではCentOSにリンクアグリゲーションの設定を最初からやっていきます。
リンクアグリゲーションとは？ この記事を見てくださっている方はおわかりだと思いますが、LAGとはLANケーブルを数本束ねて高速化＆耐障害性に優れているものになっています。 例：1GbEのケーブルを2本挿して、LAGにすると、２Gbpsの帯域まで確保することが可能になります。 もし、一本でも抜けたり故障などで切断されても、冗長化もされているので通常の１Gbpsで通信します。 このように、絶対止まってほしくないものやNASのように速度が求められていて、止まってほしくないもので使うときに非常に必要になる技術です。
設定方法 設定方法として、以下の2つがあります。
 nmtui（GUI） nmcli（CUI)  今回はこの内のnmtuiを使った設定方法を紹介します。 nmtuiとnmcliはNetworkManagerの管理ツール的なものと思っていただいても間違っていないです。 環境はCentOS7.5を使用しています。
設定していく 1.nmtuiを起動する sudo nmtui
恐らく、管理者権限ではないと設定出来ない可能性が高いです。  

こんな感じのネットワークの設定画面が表示されます。
2.LAGの設定をしていく Edit a connectionを選択してから、Addを選択すると、下のようなものが出てきます。
   LAGを使う場合はBondを選択します。
3.bondの設定をしていく    AddでEthernetを選択し、Device名を手打ちでします。 それから、Modeで802.3adを選択すると、リンクアグリゲーションを使うことが出来るようになります。 IPv4を固定にしたい場合は、Manualですることができます。 最後にOKを選択し、ダイアログを閉じます。 これでLAGを使用することが可能になります。
4.IPアドレスを取得＆pingが通るか確認する google.co.jpにpingが通るか確認するには
ping google.co.jp  IPアドレスが取得されているか確認したい場合は
ip addr  これで確認することが可能になります。</description>
    </item>
    
  </channel>
</rss>