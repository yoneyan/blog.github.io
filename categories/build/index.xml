<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>build on のんびりと生きたい</title>
    <link>https://yoneyan.dev/categories/build/</link>
    <description>Recent content in build on のんびりと生きたい</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 04 Jun 2019 19:03:13 +0900</lastBuildDate>
    
	<atom:link href="https://yoneyan.dev/categories/build/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>nginxでリバースプロキシとLet&#39;s Encryptを導入する</title>
      <link>https://yoneyan.dev/post/introducing-reverse-proxy-and-letsencrypt-with-nginx/</link>
      <pubDate>Tue, 04 Jun 2019 19:03:13 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/introducing-reverse-proxy-and-letsencrypt-with-nginx/</guid>
      <description>nginxでLet&amp;rsquo;s Encryptを用いてhttps（SSL/TLS）を有効にする方法をこちらに書いていきます。
当方のLet&amp;rsquo;s Encryptの記事は備忘録と書きます。他社のサイトさんの方がわかりやすいと思うので、わからない点などがあれば調べていただければ幸いです。
今回はリバースプロキシを使用します。
リバースプロキシの設定 １．configを作成する /etc/nginx 上にnginxのいろんな設定ファイルがあります。
特に、nginxのメインとなる主の設定ファイルとなるのが/etc/nginx/nginx.confです。
ですが、このファイルを直接弄ってしまうとわかりにくいという問題が起きるので今回は/etc/nginx/conf.d/以下のファイルを新たに作成します。
/etc/nginx/conf.d/[好きな名前].conf
server{ server_name example.net; listen 80; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-Host $host; proxy_set_header X-Forwarded-Server $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; location /test1/ { proxy_pass http://localhost:8080/; } location /test2/ { proxy_pass http://localhost:3000/; } }  ２．動いているか確認する systemctl restart nginx  nginxを再起動させて、リバースプロキシが働いてくれているか確認します。
Let&amp;rsquo;s Encryptの設定 ０．Let&amp;rsquo;s Encryptで必要なものを入れる yum -y install epel-release yum -y install certbot  certbotというものが必要となるので、インストールします。
１．証明書を取得する certbotを使って取得します。
certbot certonly --standalone  ２．設定に追加する certbotを実行することで、</description>
    </item>
    
    <item>
      <title>Linuxのディスク容量拡張の方法</title>
      <link>https://yoneyan.dev/post/linux-disk-capacity-expansion-method/</link>
      <pubDate>Mon, 03 Jun 2019 13:59:36 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/linux-disk-capacity-expansion-method/</guid>
      <description>UbuntuServerのディスクの容量を拡張する必要が出てきたので、ここに備忘録として残していきます。
VPSを使っていると、スケールアップなどで容量が拡張してくれるものがあります。しかし、ディスクとしては拡張されていても最初から入っているパーティションが勝手に伸びたり縮んだりすることが出来ないので我々が操作をしてあげないといけません。
前提条件 /dev/sda2のパーティションの容量を拡張するという想定で拡張の方法を書いていきます。
0．partedが入っていない場合はインストールする partedは標準のLinuxOSでは入っている場合が多いですが、実際に入っていない場合もあるかもしれないので、その場合入れてあげます。
debian系
apt install parted  RedHat系
yum install parted  これで、パーティションツールを入れることができます。
１．partedから容量を拡張する sudo parted print all # /dev/sdaを選択する select /dev/sda # /dev/sdaのパーティションの構成をみる print /dev/sda # パーティション2をリサイズする resizepart 2  「End 400G 」100%とすることで、最大容量まで拡張できます。
最後に/dev/sdaの容量を見てみます。
print /dev/sda  2．実容量を拡張する df -h  これでマウント中の容量を見ることができます。
そうすると実容量が拡張されていないため、resize2fs というコマンドを使っていきます。
sudo resize2fs /dev/sda2  もちろんですが、root権限が必要です。
３．容量を確認する df -h  これで/dev/sda2の部分の容量が拡張されているのかを確認してください。</description>
    </item>
    
    <item>
      <title>CentOS7でLACPとタグVLANを使ってみる</title>
      <link>https://yoneyan.dev/post/try-using-lacp-and-tagged-vlan-on-centos7/</link>
      <pubDate>Sun, 31 Mar 2019 20:02:44 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/try-using-lacp-and-tagged-vlan-on-centos7/</guid>
      <description>当方の環境で使っているCentOS7でLACPとタグVLANを使う必要が出てきたのでその際に方法をここに備忘録として書きます。
環境 CentOS=========L3 Switch(vlan10,vlan20)
2つのLANケーブルを使って、LACPでリンクアグリゲーションを組みます。
CentOS側のNIC：eth0,eth1
設定する １． いらないものを排除する systemctl stop NetworkManager systemctl disable NetworkManager  NetworkManagerが邪魔になるので、停止＆無効にします。
２．bonding機能を有効にする modprobe bonding  これをしないと、リンクアグリゲーションができないので、忘れずに実行して下さい。
３．コンフィグを書いていく 3.1．bond0の設定 vi /etc/sysconfig/network-scripts/ifcfg-bond0  DEVICE=bond0 NAME=bond0 TYPE=Bond ONBOOT=yes BOOTPROTO=none BONDING_OPTS=&amp;quot;downdelay=0 miimon=100 mode=802.3ad updelay=0&amp;quot; BONDING_MASTER=yes  3.2．LAGにするインタフェースの設定 vi /etc/sysconfig/network-scripts/ifcfg-eth0  DEVICE=eth0 TYPE=Ethernet BOOTPROTO=none ONBOOT=yes NM_CONTROLLED=no IPV6INIT=no MASTER=bond0 SLAVE=yes  これでeth0は完了です。次にeth1の設定をしていきます。
vi /etc/sysconfig/network-scripts/ifcfg-eth1  DEVICE=eth1 TYPE=Ethernet BOOTPROTO=none ONBOOT=yes NM_CONTROLLED=no IPV6INIT=no MASTER=bond0 SLAVE=yes  3.3．Bond0に対するTagVLANの設定 VLAN10の設定
vi /etc/sysconfig/network-scripts/ifcfg-bond0.10  TYPE=&amp;quot;Ethernet&amp;quot; BOOTPROTO=none DEVICE=&amp;quot;bond0.</description>
    </item>
    
    <item>
      <title>LinuxでPT2ドライバをインストールする</title>
      <link>https://yoneyan.dev/post/install-pt2-driver-on-linux/</link>
      <pubDate>Mon, 25 Mar 2019 12:23:32 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/install-pt2-driver-on-linux/</guid>
      <description>PT3ドライバでインストールする記事が多い気がするので、ここに備忘録として書きます。
CentOSで今回はドライバインストールを行いましたが、他のディストリビューションでも同じです。
作業開始！ 1．ドライバをダウンロードしてインストールする 1.1．ダウンロードする 以下のものをダウンロードします。 http://hg.honeyplanet.jp/pt1/archive/tip.tar.bz2
cd ~/src wget http://hg.honeyplanet.jp/pt1/archive/tip.tar.bz2  1.2．インストールする tar xvlf tip.tar.bz2 cd pt1-7662d0ecd74b/driver make sudo make install  2．modprobeにブラックリストを追加する vi /etc/modprobe.d/blacklist.conf  blacklist earth-pt1  を/etc/modprobe.d/blacklist.confに入力する
3．再起動する sudo reboot  このコマンドを入力すると再起動されます。
4．確認する ドライバが導入されたか確認するために、再起動後以下のコマンドを入力します。
ls /dev/pt1* /dev/pt1video0 /dev/pt1video1 /dev/pt1video2 /dev/pt1video3  このように表示されると導入されています。</description>
    </item>
    
    <item>
      <title>CentOSでL2TPサーバーを構築してみる</title>
      <link>https://yoneyan.dev/post/try-building-an-l2tp-server-on-centos/</link>
      <pubDate>Fri, 18 Jan 2019 16:21:21 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/try-building-an-l2tp-server-on-centos/</guid>
      <description>UbuntuServerでL2TPサーバーを構築するという記事を出しましたが、CentOSでの構築方法をここで説明させていただきます。
VultrというVPSサービスを使っています。Lightsailではなぜかクライアント側が繋がらなかったので諦めました。
OpenVPNは安全性で言うと、現時点では一番強力と言っても過言ではありませんが、一つ問題があります。その問題は、使いにくいところです。構築するのもVPNを使う側も証明書を入れたりと少々ややこしいのが欠点です。
L2TPサーバーはOpenVPNに比べると貧弱姓が疑われている部分がありますが、AndroidやiOSやWindowsのようなクライアントの標準機能（外部アプリやソフトなし）で簡単に繋ぐことが可能なので、おすすめです。
構築開始！ １ 必要な物をインストールする yum -y install xl2tpd libreswan  ２ L2TPを設定する L2TPサーバーの設定をしていきます。
2.1 xl2tpdのメインの設定を変更する 共通する設定
/etc/xl2tpd/xl2tpd.conf
[global] ;パスの指定 auth file = /etc/ppp/chap-secrets ;グローバルIPアドレスをここに指定する listen-addr = xx.xx.xx.xx [lns default] ;L2TPクライアントから割り当てられるIPアドレスの範囲を指定する ip range = 192.168.1.128-192.168.1.254 ;L2TPサーバー側の仮想ネットワークのIPアドレスを指定する local ip = 192.168.1.99 ;chap認証を拒否するのか refuse chap = yes ;pap認証を拒否するのか refuse pap = yes ;認証を許可するのか require authentication = yes ;ホスト名 name = LinuxVPNserver ;デバッグを取るか、取らないか ppp debug = yes pppのオプションファイルの場所を指定 pppoptfile = /etc/ppp/options.</description>
    </item>
    
    <item>
      <title>openvpnを使ってVPSと自宅のpfsenseにつないでみる（その2）</title>
      <link>https://yoneyan.dev/post/use-openvpn-to-connect-vps-and-pfsense-at-home_part2/</link>
      <pubDate>Thu, 10 Jan 2019 11:49:55 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/use-openvpn-to-connect-vps-and-pfsense-at-home_part2/</guid>
      <description>openvpnを使ってVPSと自宅のpfsenseにつないでみる（その1）の続きです。
その2ではopenvpnのクライアントになるpfsense側の設定をしていきます。
前提条件 前提条件としてサーバー側の設定が以下のものと仮定して説明します。
サーバーIP:10.0.0.9
openvpn（サーバー側）のポート:1194/udp
サーバー側から取ってくるべきである物  ta.key ca.crt client1.crt client1.key  1.pfsenseにopenvpnの証明書を登録する 1.1.System/Certificate Managerに移動    1.2.CAを追加する Addをクリックする
   Descriptive name に わかりやすい名前をつけます。例えば、[サーバー名_CA]のような感じです。
Certificate data に ca.crtの内容をすべて入れます。
Serial for next certificate はよくわからなかったので「1」と入れました。
1.3.クライアント証明書を登録する Certificate ManagerにあるCertificateに移動します。
   Descriptive name に適当な名前をつけます。
Certificate data にclient1.crtの内容を入れます。
Private key data にclient1.keyの内容を入れます。
2.pfsenseでopenvpnの設定を開く    VPN-&amp;gt;OpenVPNを開きます。
2.1.openvpnでclientを追加する    AddでClientを追加します。
2.2.設定をしていく    Server host or address:10.</description>
    </item>
    
    <item>
      <title>大好きな曲を電話回線網から流す方法</title>
      <link>https://yoneyan.dev/post/how-to-play-your-favorite-songs-from-the-telephone-network/</link>
      <pubDate>Tue, 25 Dec 2018 05:28:23 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/how-to-play-your-favorite-songs-from-the-telephone-network/</guid>
      <description>この記事は、 OIT Advent Calendar 2018の25日目の記事です。
最終日ということもあり気合を入れて紹介させていただきます。
作った物 いきなりになってしまいますが、作った物から紹介させていただきます。私が大好きな曲の中でもかなりのトップレベルを占める曲として、コンギョと一般男性脱糞シリーズ という曲があります。（最近では鼻歌でも歌ってしまうほどのはまってしまっています&amp;hellip;）
このような素晴らしい曲は残念ながらインターネット上でのみの配信となっており、インターネットが繋がらない人には聞いてもらうことも出来ません。 そこで、いろんな人に聞いてほしいという思いで電話回線網から音楽を聞けるものを作りました。
お家の方にも紹介していただけると楽しんでいただけると思います。電話帳に登録した方がいらっしゃれば、私の方まで報告していただけると嬉しいです。
コンギョバージョン
05054377759
一般男性脱糞シリーズバージョン
05054377762
＊追記　ゆゆうたの様々な曲を取り寄せております、ゆゆうた楽曲専用ダイヤルを開設いたしました。
ゆゆうた楽曲専用ダイヤル
05053595690
暇な方は是非この電話番号にかけてみてください。
もし、通じない場合はお家の固定回線からかけてみてください
誰でも簡単に作ることができるのでそのレシピを紹介します。
仕組み   材料  VPS or 自宅サーバー スマホ fusion IP Phone smartのようにSIPで接続が可能なプロバイダ  これだけです。
VPSは以下のものがおすすめです。
＊VPS or 自宅サーバーをサーバーと略させていただきます。
レシピ 0.SIP情報を観察する    ドメインとSIPアカウント、そのパスワードをメモっておきます。
1.Asteriskをサーバーに入れてあげます CentOSさんの場合はパッケージが標準で搭載されていないので、Debianさんにお願いします。
Debianさん
apt -y install asterisk apt -y install mpg123  mpg123はasteriskでmp3を流すためのコーディック用のパッケージです。
2.Asteriskの設定ファイルを調理してあげます /etc/asterisk/sip.conf　を開きます。
（お好きなエディタから開いて下さい。)
register=&amp;gt;sipアカウント:sipアカウントのパスワード@ドメイン  ;IP [fusion-smart_1] type=friend username=sipアカウント fromuser=sipアカウント secret=sipアカウントのパスワード host=smart.</description>
    </item>
    
    <item>
      <title>UbuntuServerでOpenVPNサーバーを構築</title>
      <link>https://yoneyan.dev/post/openvpn-server-for-ubuntuserver/</link>
      <pubDate>Wed, 17 Oct 2018 00:34:29 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/openvpn-server-for-ubuntuserver/</guid>
      <description>UbuntuServerを使ってOpenVPNサーバーを構築していきます。 openvpnを使ってVPSと自宅のpfsenseにつないでみる（その1）ではCentOSでOpenVPNサーバーを構築していきましたが、UbuntuServerでは少し構築方法が違うのでここで紹介していきます。
OpenVPNサーバーの構築をしていく 1.関連するパッケージをインストールしていく apt install openvpn easy-rsa  openvpnとeasy-esaを入れます。
2.フォルダやらファイルを作る cd /etc/openvpn make-cadir ca cd ca  make-cadir caでcaフォルダに証明書作成ツールなどを勝手に入れてくれます。
3.varsファイルを設定していく export KEY_COUNTRY=&amp;quot;JA&amp;quot; export KEY_PROVINCE=&amp;quot;OSA&amp;quot; export KEY_CITY=&amp;quot;Osaka&amp;quot; export KEY_ORG=&amp;quot;test&amp;quot; export KEY_EMAIL=&amp;quot;test@myhost.mydomain&amp;quot; export KEY_OU=&amp;quot;test&amp;quot;  vi varsやnano varsのようなコマンドで設定しています。 varsファイルの編集が終わったら必ず
source ./vars  を実行します。
4.CA証明書・秘密鍵を作っていく ./clean-all cp openssl-1.0.0.cnf openssl.cnf ./build-ca  cp openssl-1.0.0.cnf openssl.cnfをしないと./build-caの段階でエラーを吐きます。
5.サーバー証明書・秘密鍵を作っていく ./build-key-server server  Enterを押しまくってyを入力します。
6.DHパラメータを作っていく ./build-dh  多少時間かかります。
7.TLSの秘密鍵を作っていく openvpn --genkey --secret ta.key  8.クライアント側の証明書を作っていく ./build-key client1 nopass  client1のところは適当な名前にしてください client1.</description>
    </item>
    
    <item>
      <title>CentOSのOpenVPNサーバーを構築してみる</title>
      <link>https://yoneyan.dev/post/try-building-a-centos-openvpn-server/</link>
      <pubDate>Fri, 07 Sep 2018 20:00:06 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/try-building-a-centos-openvpn-server/</guid>
      <description>OpenVPNを使ってVPSと自宅のpfsenseにつないでみました。
この記事の構成 このテーマは3つに分けて、記事にしていく予定です。
その１:VPS側（サーバー側）の設定
その２:pfsense側（クライアント側）の設定
その３:ファイアーウォールの設定
VPS側で
OpenVPNの設定をしていく この記事ではCentOSを使った紹介をしていきます。
最初にやっておくこと
CentOSにepelのレポジトリを使えるようにしておきましょう
関係するパッケージをインストールする yum --enablerepo=epel -y install openvpn easy-rsa  フォルダを作る mkdir /etc/openvpn/easy-rsa  フォルダ群をコピー cp /usr/share/easy-rsa/***/* /etc/openvpn/easy-rsa/ -R  米印の部分にはeasy-rsaのバージョンを入れてください。（執筆時は3.03です。）
認証局を作る cd /etc/openvpn/easy-rsa ./easyrsa init-pki ./easyrsa build-ca ./easyrsa gen-dh cd /etc/openvpn openvpn --genkey --secret /etc/openvpn/ta.key  詳しくはよくわかりませんが、これだけで認証局が超簡単に作ることができます。
./easyrsa build-caを実行すると&amp;hellip;
Enter PEM pass phrase:  こういう物が出てくるので、適当に自分で考えてパスフレーズを入力します。
サーバー側の証明書を作成 パスワードがめんどくさいのでパスワードなし(no pass)にします。
cd /etc/openvpn/easy-rsa ./easyrsa build-server-full server nopass  Server側のkey:/etc/openvpn/easy-rsa/pki/private/server.key
Server側のcrt:/etc/openvpn/easy-rsa/pki/issued/server.crt
クライアント側の証明書を作成 こちらもパスワードがめんどくさいのでnopassにします。</description>
    </item>
    
    <item>
      <title>PowerConnect6248を静音化</title>
      <link>https://yoneyan.dev/post/2018-04-25-silent-powerconnect6248/</link>
      <pubDate>Wed, 25 Apr 2018 07:17:56 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/2018-04-25-silent-powerconnect6248/</guid>
      <description>今まで、家にはPowerConnect2724とx600-24Tsという24ポートのハブが二台あるんですが、それでも足りなくなってきたということもあり、PowerConnect6248をヤフオクで落札しました。L4スイッチで48ポートもあるということで、かなり期待しているんですが問題があります。 それはうるさいことです。 PowerConnect2724の24ポートのハブでもなかなかうるさかったのですが、48ポート搭載しているPowerConnect6248は許容範囲を超えちゃいました。 まあ、普通に考えて1Uサイズで48ポートもあってLayer4まで対応しちゃってるハブなのでファンがアレなので、今回は静音化してみます。 注意 分解するので故障の可能性があるので、自己責任でお願い致します。（これだけは言っておきますが、絶対しない方がいいです。機械的には&amp;hellip;） 普通の人は↓こういうものを諦めて買いましょう。

TP-Link スイッチングハブ 48ポート TL-SG1048 10/100/1000Mbps 金属筐体 ギガビット 5年保証
posted with カエレバ
TP-LINK 2017-03-24
Amazon
楽天市場
Yahooショッピング
用意する物 必須
 抵抗（各種抵抗値） 半田ごてセット  あればいい物
 テスター 可変抵抗（これはあった方がいい）  作業開始 まず、分解 まず分解しないと何も始まらないので、ネジを外して中身を開けてみます。  

PowerConnect6248中身[/caption] こんな感じになってます。
ファンに抵抗を入れてみる ここで、可変抵抗を持っているとかなり便利です。ファンのスピードを適当に決めてから可変抵抗の抵抗値をテスターで調べるのが一番手っ取り早いように思います。 個人的には22Ω+47Ωの合計69Ωがファンも静かでいいと思いました。 images/fix/silent/powerconnect6248  

動作確認のためにクリップ型のジャンパー線があるとかなり便利です。
半田付けする    こんな感じになりました。抵抗を直列に繋ぐときは長くならないように工夫した方がいいです。 これで一回電源をつけて動作確認をして、静かになっていたら成功です。
絶縁処理 このままだと、ハブ本体を動かした時などに基盤と抵抗が触れてショートしちゃう可能性が高いので、絶縁処理をしておきます。 絶縁処理といってもセロハンテープなどでまくだけでもかなり十分です。機械的には  

   適当といえば適当ですが、絶縁さえ出来ていれば問題ないです
まとめ これで静音化の作業は終了となります。 かなり静かになりましたが、うるさくても問題がない方や自宅サーバールームがある方は静音化はしないほうがいいです。意外とこのハブは熱を持ちます。 回転数を落としたこともあり、ファンのステータス表示が赤になってしまいましたが、大丈夫でしょう</description>
    </item>
    
    <item>
      <title>PS4で遅延なくカラオケをする方法</title>
      <link>https://yoneyan.dev/post/2018-01-20-how-to-karaoke-without-delay-on-ps4/</link>
      <pubDate>Sat, 20 Jan 2018 10:56:41 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/2018-01-20-how-to-karaoke-without-delay-on-ps4/</guid>
      <description>お詫びと訂正
(2019/03/11 20:08) 有線マイクでの採点は現時点ではできません。
(2019/03/11 17:30) 当方の知識不足による影響で「センド＆リターン付きのミキサーを使う方法」にて間違った方法を載せておりました。原因と致しまして、当方のfx sendの知識が不十分でした。誠にお詫び申し上げます。只今、対処法につきまして、模索しておりますのでもう少しお待ちください。
PS4でカラオケ＠DAMしてみる 前回、このブログではPC版のカラオケ＠DAMを紹介させていただきましたが、最近PS4を購入したのでPS4版のカラオケ＠DAMを試してみました。そうすると、PC版と同じように遅延が発生したのでその対処方を今回は記事にさせていただきます。
PS4版の利点  導入しやすい 採点機能が二種類ある（PC版は1種類） 契約はチケット形式になっており、1日間、30日間、1年間の三種類がある（1年間契約ならお得！）  PS4版の欠点  オーディオインタフェースを使うことが出来ない PS4が必要  ざっと書きましたが、このような感じになっています。
遅延なくカラオケをする方法 遅延なくカラオケをする方法として2通りの方法があります。
 有線マイクを使う方法（採点できない） ワイヤレスマイクを使う方法（音声を受け取る側に出力端子が2つあるもの）  方法があります。
注意していただきたいところとして、「有線マイクを使う方法」では採点ができないという点です。
「センド＆リターン付きミキサーを使う方法」を試された方で、採点をしたい方は、現時点では採点できません。
共通して必要なもの PS4につなげるときに必要になるものです。
マイクの音とカラオケ音源を混ぜる必要があるため、ミキサーが必要になります。
{:nomarkdown}  {:/nomarkdown}
大体、こういう汎用性のあるものは認識してくれるので家に転がってるものがあればそれでも使えることは多いです。オーディオインタフェースは基本無理です。
ミキサーに接続するときに業務用の6.3mmジャックというものになるので
{:nomarkdown}   {:/nomarkdown}
スピーカー（必要な場合）
ミキサーに音が出力されるため、スピーカーで流す場合は別途でスピーカーを用意する必要があります。
イヤホンでカラオケする場合は必要ではないです。
{:nomarkdown}  {:/nomarkdown}
有線マイクを使う方法（採点はできません） こちらの方法ではPS4側にマイク音がいかないので、採点出来ないです。
有線マイクが必要になります。
{:nomarkdown} {:/nomarkdown}
接続方法 1．ミキサー部分のMICに有線マイクをつなげます。
2．テレビのイヤホンジャックから音源を取り出し、ミキサーのLINE INに接続します。
ワイヤレスマイクを使う方法 こちらの方法は検証済みです。また、こちらの方法では採点も可能です。
PS4側につなげる必要があるので、オーディオアダプタをつけます。
大体、こういう汎用性のあるものは認識してくれるので家に転がってるものがあればそれでも使えることは多いです。オーディオインタフェースは基本無理です。
{:nomarkdown} {:/nomarkdown}
ワイヤレスマイク
{:nomarkdown} {:/nomarkdown}
ワイヤレスマイクは各マイクの音を出力できて二つのマイクを同時に出力出来るものであれば問題ありません。
   出力端子がこんなように同時に出力ができる場合は問題ありません。</description>
    </item>
    
    <item>
      <title>サーバーOSの選定法</title>
      <link>https://yoneyan.dev/post/serveros-selection-method/</link>
      <pubDate>Tue, 18 Apr 2017 00:00:52 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/serveros-selection-method/</guid>
      <description>個人的に思うサーバーOSの選定法を紹介していきます。 サーバーOSの種類としてはWindows系、Debian系、RedHatLinux系、Unix系などたくさんあり、選択に迷ってしまうというのが現状です。自分も今のところ自宅サーバーの範囲での趣味なので、参考になるのかわかりませんが、もし参考にしていただき、役に立つととても嬉しく思います。
サーバー構成 自分の家の場合、メインブログ（本ページ）はレンタルサーバーで運用しています。その理由はまた、別記事で書く予定です。 基本的に自宅サーバーで動かしているのは、友達や家族、自分が使うためのサーバーにしています。 サーバーOSとしては windows10Pro&amp;mdash;バックアップサーバー、ファイル共有、DLNAサーバー、地デジ配信サーバー(spinel3を使用)、緊急地震速報の通知、リモートデスクトップ CentOS7&amp;mdash;&amp;mdash;&amp;mdash;-NTPサーバー、Webサーバー、NTPサーバー、仮想化サーバー、監視サーバー、簡易監視カメラ録画サーバー として使っています。
サーバーOSを決める手順  自分がサーバーで具体的になにをやりたいのかを決める それに見合うサーバーOSを決める サーバー構成を決める  とこんな感じなのではないのかなと思います。
サーバーOSの種類 今回は3つ紹介します。他にもありますが多すぎるので割愛します。（多すぎる）
Debian系(Debian,UbuntuServer) DebianがベースになっているLinuxOSになります。 パッケージ管理がaptになっています。 デスクトップでubuntu系を使ったことがある人には比較的入りやすいと思います。 ubuntuserverは安定性が他に比べると悪いと言われていますが、自宅サーバーで使う分には全く問題ないように思います。パッケージ数も多く、apt-get install で大体のものが入るので、初心者にはかなりおすすめです。
Red Hat Enterprise Linux系(CentOS,Fedora) もともと、Red Hat Enterprise Linuxは商用ですが、GPLライセンスのもとでRed Hat Enterprise Linuxが公開されているので、それをベースとしてCentOSを有志が作り上げました。Red Hat Enterprise Linuxということもあって、安定性が高いのが、利点です。 また、全世界で見るとシェアが少なくなっていますが、日本ではまだまだシェアが高いこともあって、使い方などのブログも多数あり、トラブルなどが起こった時には強い味方になります。
Windows系(windowsserver,windows10など) 普段使っているパソコンがwindowsならファイル共有用サーバーではwindowsPCを使ったほうがかなり構築が楽です。 自宅サーバーでwindows10で構築している理由としては記憶域というものが使えるからです。RAIDのように複雑ではなく、自分のような初心者でも簡単に構築できるのでかなりおすすめです。他にはクライアント側が大体がwindowsなのでファイル系の管轄はwindows側に託しています。ドメイン参加のようなことをしないなら無理にwindowsserverにする必要もないように思います。
まとめ このように簡単にサーバーOSの紹介の方をさせていただきました。 サーバーOSを決めるのはかなり迷うと思いますが、試行錯誤した上でこれから何を使っていくのか決めていくのが一番いいのではなにのかなと思います。</description>
    </item>
    
    <item>
      <title>kinectでMMDを動かしてみた</title>
      <link>https://yoneyan.dev/post/i-tried-moving-mmd-with-kinect/</link>
      <pubDate>Tue, 17 Jan 2017 15:20:24 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/i-tried-moving-mmd-with-kinect/</guid>
      <description>前回はkinectの簡単な紹介をさせていただきました。ということで今回は本題であるkinectを使ってMMDを動かしてみます！！
著者のPC環境 OS:windows10Pro
CPU:corei7 4790k
GPU:gtx970
memory:16GB
kinect:kinectv1（初期）
となっています。そこそこのスペックが必要と思っていましたが、CF-S9(Corei5-520M/GPUオンボード)でも動いたので、そこまでのスペックの高くないパソコンでも動きました。
環境構築をする 方法  OPENNIを使って動かす MoggNUIを使って動かす  kinectでMMDを動かす方法はこの二つがあります。
今回は2番の方法で構築していきます。OPENNIを使ってもできますが、windows７じゃないと動かないなどの問題が起きてあきらめました&amp;hellip;
それ以前にOPENNIを使って構築するのがくそみたいにめんどくさいので2番の方法をお勧めします。
ダウンロード Kinect for Windows SDK v1.8（必須）
https://www.microsoft.com/en-us/download/details.aspx?id=40278
MikuMikuDance（DirectX9 Ver）とDxOpenNI.dll（必須）
http://www.geocities.jp/higuchuu4/
MoggNUI（必須）
https://sites.google.com/site/moggproject/
もし、リンク切れがあった場合はお問い合わせ欄又は下にあるフォーム欄に訂正箇所を送信していただけると助かります！！
インストール １.最初にKinect for Windows SDK v1.8をインストールします。    インストールします。インストールすると自動的にドライバも導入されるのでこの作業はしましょう。
2.MikuMikuDance（DirectX9 Ver）を適当なフォルダに展開する    こんな風に展開します。
これでMikuMikuDance.exeを起動できるか確かめましょう。
もし動かない場合は下のランタイムをインストールしてください。
Microsoft Visual C++ 2005 再頒布可能パッケージ(x86)
Microsoft Visual C++ 2008 再頒布可能パッケージ(x86)
DirectX エンド ユーザー ランタイム
3.DxOpenNI.dllとMoggNUIの導入 DxOpenNI.dllを展開すると
   のように出てくるのでSamplesConfig.xmlだけをMMDのDataフォルダに入れます。</description>
    </item>
    
  </channel>
</rss>