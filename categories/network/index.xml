<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>network on のんびりと生きたい</title>
    <link>https://yoneyan.dev/categories/network/</link>
    <description>Recent content in network on のんびりと生きたい</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 13 Sep 2019 01:44:15 +0900</lastBuildDate>
    
	<atom:link href="https://yoneyan.dev/categories/network/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2019年度(8月)自宅ネットワーク機器の紹介</title>
      <link>https://yoneyan.dev/post/introduction-of-home-network-equipment-in-2019-09/</link>
      <pubDate>Fri, 13 Sep 2019 01:44:15 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/introduction-of-home-network-equipment-in-2019-09/</guid>
      <description>サーバー機器はこちらで紹介しています。
また、その他機器はこちらで紹介しています。
余力があれば、自宅のネットワーク構成も記事にする予定です。
現時点 ではVLAN数は「33」です。
1F　リビング ここでは親が活動しているので、静かな機器を使用しています。
   ルータ部分
   AP部分
 Ubiquiti Edgerouter ER-X (メインルータ) Aironet 1040 (5ghz n対応) TP-Link TL-SG105E TP-Link TL-SG108E  貧弱なので、自宅のルーティングはメインルータが全て担っています。
２F　鯖部屋 鯖部屋になってしまいましたが、一応倉庫部屋です。
   オレンジがスイッチ間、白がサーバー間、緑がマネージメント用に一応、別れています。
以下のもの(SSB30 1台、Brocade 300以外)は常時電源入ってます。
 AT-x510-28GTX　(2Fメインスイッチ) AT-x510-28GTX　(サーバースイッチ) Fujitsu SR-X324T1（ほしいときに使う） Fujitsu SR-X324T1（検証用サーバースイッチ） PowerConnect 2724 （マネージメントネットワーク） Cisco 4400 Wireless LAN Controller (WLC) GS728TPS (POE給電用) IX2105　（HomeNOC接続用） どこかのメーカのIP電話ゲートウェイ SSB30 x2 (近々RX100 S7に置き換え予定) Aironet 1700 GS108P (POE給電スイッチ) Brocade 300 (FC Switch) Aironet 1600  裏側はこのような感じです。</description>
    </item>
    
    <item>
      <title>GS724Tでリンクアップしない時の対処法</title>
      <link>https://yoneyan.dev/post/what-to-do-when-you-dont-link-up-with-gs724t/</link>
      <pubDate>Thu, 15 Aug 2019 00:48:35 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/what-to-do-when-you-dont-link-up-with-gs724t/</guid>
      <description>GS724TにLANケーブルを刺しても機嫌がいいときはアップしてくれますが、悪いときは本当にリンクアップしてくれない時が多く、まじめにイライラしてきたのでいろいろ探っているとおそらく原因がわかったのでこちらに対処法を載せます。
私自身の環境だけに要因する問題の可能性もあるので、あくまでもこういう場合があるよと思っていただけると幸いです。
GS724Tとは    amazon
GS724Tを簡単に紹介します。
GS724TはNetgear社の24ポートのSmart Switchです。
Smart Switchということもあり、LACPやらSNMPなどのそこそこ使える機能が豊富でしかも現時点ではヤフオクでも安く手に入るのが一番うれしいところです。
また、スパニングツリーも使えるためLANケーブルをループして事故を起こすことも未然に防げます。
問題の解決 LANケーブルをつないでもリンクアップしないという前代未聞の意味のわからないことになっているので、トラブルシューティングとしてGS724Tで有効になっている機能をことごとく無効にします。
そうすると&amp;hellip;.
   Flow Control Setting
フロー制御が原因でした。
フロー制御とは 私自身も詳しく説明できないのですが、、
送信側と受信側のリンクの速度の差でバッファがオーバーにならないように制御するものです。おそらく、この機能が悪さをしているのが原因だと思われます。
フロー制御が働いても速度に制限をかけたり、パケットを一時的に中断させたりするだけなのでおそらくGS724Tのバグです。
フロー制御の無効化方法 １．ログインする ２．Switchingタブに移動    Switchingのタブに移動（ここではSystemタブになっている）
Switchingのタブに移動させます。
３．Flow Controlを選択    Flow Controlを選択
Flow Controlを選択します。
４．無効化する    Flow Controlの設定
Global Flow Control(IEEE 802.3x) Modeの部分をDisableにする
これにより、フロー制御を無効にできます。</description>
    </item>
    
    <item>
      <title>CentOSで無線を有線に変換する(2)</title>
      <link>https://yoneyan.dev/post/convert-wireless-to-wired-with-centos_2/</link>
      <pubDate>Sun, 11 Aug 2019 23:56:52 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/convert-wireless-to-wired-with-centos_2/</guid>
      <description>CentOSを使って無線を有線にしなければならないことができたので、備忘録として書きます。
構築    APから飛ばしたものをCentOS RouterでIPマスカレードし、Clientから体外にアクセスできるようにします。
前提条件として
WLAN側：DHCP（ここでは、172.16.100.100がDHCPより取得したと仮定する）
LAN側：172.16.200.1&amp;frasl;24
WLANインターフェース:wlp2s0
LANインターフェース:eth0
とします。
1．無線側の設定 1.1．WLAN側インターフェースを確認する NetworkManagerのデバイスを一覧で出してみます。
 nmcli device  とすると、
 DEVICE TYPE STATE CONNECTION --------------------------------------------- eth0 ethernet disconnected　-- wlp2s0 wifi disconnected　--  wlp2s0がunmanagedになっている場合は、 nmcliで無線がunmanagedの場合の対処法 こちらに対処法を記事にしたのでご覧ください。
1.2．WLANのSSIDを設定する nmcli device wifi connect [ssid] password [password]  [ssid]にWiFiのSSIDを、[password]にはSSIDに対するパスワードを入力してください。
2．有線側の設定 2.1．IPアドレスを固定で設定する nmcli connection modify eth0 ipv4.method manual nmcli connection modify eth0 ipv4.addresses &amp;quot;172.16.200.1/24&amp;quot;  172.16.200.1/24の部分にLAN側のIPアドレスを記入します。
2.2．DHCPサーバを構築する DHCPサーバをインストールする
yum -y install dhcp  /etc/dhcp/dhcpd.</description>
    </item>
    
    <item>
      <title>nmcliで無線がunmanagedの場合の対処法</title>
      <link>https://yoneyan.dev/post/what-to-do-if-the-radio-is-unmanaged-with-nmcli/</link>
      <pubDate>Sun, 11 Aug 2019 23:29:40 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/what-to-do-if-the-radio-is-unmanaged-with-nmcli/</guid>
      <description>nmcliで無線LANの設定がなかなかできなかったので、ここでは簡単に対処法を書きます。
ここでは無線LANをWLANと記述します。
確認してみる nmcli device  より、WLANの管理状態を確かめてみます。
 DEVICE TYPE STATE CONNECTION --------------------------------------------- eth0 ethernet connected eth0 wlp2s0 wifi unmanaged --  とこのようにWLANだけ管理されていない状況になっていることがわかります。
このような場合は、NetworkManagerのWifiを管理するNetworkManager-wifiを入れる必要があります。
yum -y install NetworkManager-wifi  このパッケージを導入してから
nmcli d wifi nmcli d nmcli connection  を実行してから、しっかりと周りのwifiが見えていれば成功です！！
失敗例 nmcli device set wlp2s0 managed yes  とこのコマンドを実行すると、一見有効になってように見えます。
しかし、
nmcli d wifi  としてもなにも帰ってこないので、 networkmanager-wifiパッケージが入っていないのがおそらく原因で無理なのだと思われます。</description>
    </item>
    
    <item>
      <title>Allied Telesis stack状態を初期の状況に戻す方法</title>
      <link>https://yoneyan.dev/post/how-to-return-the-alliedtelesis-stacks-tate-to-the-initial-state/</link>
      <pubDate>Wed, 31 Jul 2019 00:15:47 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/how-to-return-the-alliedtelesis-stacks-tate-to-the-initial-state/</guid>
      <description>x510-28gtxというL3スイッチを実際に使っています。
ヤフオクで購入したのですが、パスワードはわかるものの、stackが組まれており、よくわからない状態になっていたので完全に初期化してみました。
スタック番号が「２」になっている状態です。
パスワードがわからない状態の初期化方法 ブートローダ部分で、
Ctrl + B -&amp;gt; 5 -&amp;gt; 1 -&amp;gt; 0 -&amp;gt; 9
とすることでパスワードが掛かっている状態でも初期状態に戻すことができるようになります。
しかし、この操作をしても以前のスタックが組まれたままになっており完全に初期化したいという状態なので、完全に初期化を実行したいと思います。
完全に初期化 enableコマンドで入り、管理用コマンドが実行できるような環境にしておきます。
AlliedWare Plus (TM) 5.4.9 03/29/19 02:51:50 awplus&amp;gt; awplus&amp;gt;en awplus#  いよいよ強制初期化のコマンドを実行します。
awplus#atmf cleanup  [atmf cleanup]というコマンドを使うことで、完全に初期化することができます。
スタックが組まれた状態でも初期の状況に戻してくれるので、今回のような完全な初期化を行いたい場合はおすすめです。</description>
    </item>
    
    <item>
      <title>FreeBSDでポート開放をする</title>
      <link>https://yoneyan.dev/post/open-port-with-freebsd/</link>
      <pubDate>Mon, 22 Jul 2019 11:16:02 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/open-port-with-freebsd/</guid>
      <description>FreeBSDとは 私自身もよくわかっていないところが多いので、https://ja.wikipedia.org/wiki/FreeBSDこちらを参考に箇条書きしてみるとこんな感じになりました。
 FreeBSDはUnix系のOS 処理速度よりも安定性を重視した設計がされているらしい？ Linux向けに開発されたものもしっかりと動く パッケージマネージャとしてpkgが入っている  始めよう 有効化する ファイアウォールのコマンドとしてipfwを使うのですが、初期の状態では
root@localhost:~ # ipfw list ipfw: retrieving config failed: Protocol not available  とこのようなエラーが入ります。この場合は、/etc/rc.confからファイアウォールを有効にする必要が出てきます。
/etc/rc.confに以下の
# Firewall firewall_enable=&amp;quot;YES&amp;quot;  設定をする こちらのサイトを参考にさせていただきました。ありがとうございます。
https://server-setting.info/freebsd/freebsd_ipfw.html
/etc/rc.confに以下を追加する
firewall_script=&amp;quot;/usr/local/etc/ipfw.rules&amp;quot;  /usr/local/etc/ipfw.rulesに以下のコンフィグを書きます。
#!/bin/sh # IPF=&amp;quot;ipfw -q add&amp;quot; ipfw -q -f flush #loopback $IPF 10 allow all from any to any via lo0 $IPF 20 deny all from any to 127.0.0.0/8 $IPF 30 deny all from 127.</description>
    </item>
    
    <item>
      <title>EdgerouterでOpenVPNクライアントを使う</title>
      <link>https://yoneyan.dev/post/using-openvpn-client-with-edgerouter/</link>
      <pubDate>Wed, 17 Apr 2019 21:37:37 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/using-openvpn-client-with-edgerouter/</guid>
      <description>EdgerouterでOpenVPNクライアントとして使う方法をこちらに記事にさせていただきます。
サーバー側の設定はこちらから
1．フォルダを作る config以下にフォルダを作成します。（config以外に保存することも可能ですが、アップデート時に消える可能性があります。）
mkdir /config/vpn/ mkdir /config/vpn/VPN1 cd /config/vpn/VPN1  2．必要なファイルをEdgerouterに持ってくる winscpなどで必要なファイルを入れます。
ca.crt、client1.crt、client1.key、ta.key を/config/vpn/VPN1にファイルを入れてあげます。
/config/vpn/VPN1/ca.crt
/config/vpn/VPN1/client1.crt
/config/vpn/VPN1/client1.key
/config/vpn/VPN1/ta.key
というようなファイル構成になります。
3．OpenVPNクライアントのコンフィグを作ってあげる。 vi client.ovpn  client dev-type tun proto udp ;VPNサーバーのipアドレス、ポート番号を指定 remote 0.0.0.0 1194 resolv-retry infinite nobind persist-key persist-tun ca /config/vpn/VPN1/ca.crt cert /config/vpn/VPN1/client1.crt key /config/vpn/VPN1/client1.key tls-auth /config/vpn/VPN1/ta.key 1 cipher AES-256-CBC auth SHA512 ;圧縮を有効 comp-lzo verb 1 reneg-sec 0  4．設定を適応する configure set interfaces openvpn vtun0 config-file /config/vpn/VPN1/client.ovpn set interfaces openvpn vtun0 description server_name  5．疎通できているか確認する show interfaces openvpn ip a  これらのコマンドでS/L部分がu/uになっていると、リンクアップしているといる意味です。</description>
    </item>
    
    <item>
      <title>Brocade 300(FabricOS)のネットワーク設定をする</title>
      <link>https://yoneyan.dev/post/configure-network-settings-for-brocade300_fabricos/</link>
      <pubDate>Sun, 07 Apr 2019 23:53:10 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/configure-network-settings-for-brocade300_fabricos/</guid>
      <description> FC-SANを使うためにBrocade 300を導入したのはいいのですが、なかなか普通のL2やL3スイッチのようには設定が行かないので、備忘録もかねて記事化していきます。
ネットワーク設定とは？ sshやtelnet、アップデートの時などに必要になってきます。
そのために今回はネットワーク設定をしていきます。
設定方法 かなり簡単にできます。
ipaddrset  このコマンドを実行することで、ネットワーク設定が簡単にできます。
ウィザード方式で設定ができるのでかなり楽だと思います。
switch:admin&amp;gt; ipaddrset Ethernet IP Address [10.77.77.77]:192.168.10.100 Ethernet Subnetmask [255.0.0.0]:255.255.255.0 Gateway IP Address [none]:192.168.10.1 DHCP [Off]:off  以上でネットワークの設定が完了します。
IPアドレスが逆に知りたいときはipaddrshowというコマンドを実行することでわかります。
switch:admin&amp;gt; ipaddrshow SWITCH Ethernet IP Address: 192.168.10.100 Ethernet Subnetmask: 255.255.255.0 Gateway IP Address: 192.168.10.1  </description>
    </item>
    
    <item>
      <title>CentOS7でLACPとタグVLANを使ってみる</title>
      <link>https://yoneyan.dev/post/try-using-lacp-and-tagged-vlan-on-centos7/</link>
      <pubDate>Sun, 31 Mar 2019 20:02:44 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/try-using-lacp-and-tagged-vlan-on-centos7/</guid>
      <description>当方の環境で使っているCentOS7でLACPとタグVLANを使う必要が出てきたのでその際に方法をここに備忘録として書きます。
環境 CentOS=========L3 Switch(vlan10,vlan20)
2つのLANケーブルを使って、LACPでリンクアグリゲーションを組みます。
CentOS側のNIC：eth0,eth1
設定する １． いらないものを排除する systemctl stop NetworkManager systemctl disable NetworkManager  NetworkManagerが邪魔になるので、停止＆無効にします。
２．bonding機能を有効にする modprobe bonding  これをしないと、リンクアグリゲーションができないので、忘れずに実行して下さい。
３．コンフィグを書いていく 3.1．bond0の設定 vi /etc/sysconfig/network-scripts/ifcfg-bond0  DEVICE=bond0 NAME=bond0 TYPE=Bond ONBOOT=yes BOOTPROTO=none BONDING_OPTS=&amp;quot;downdelay=0 miimon=100 mode=802.3ad updelay=0&amp;quot; BONDING_MASTER=yes  3.2．LAGにするインタフェースの設定 vi /etc/sysconfig/network-scripts/ifcfg-eth0  DEVICE=eth0 TYPE=Ethernet BOOTPROTO=none ONBOOT=yes NM_CONTROLLED=no IPV6INIT=no MASTER=bond0 SLAVE=yes  これでeth0は完了です。次にeth1の設定をしていきます。
vi /etc/sysconfig/network-scripts/ifcfg-eth1  DEVICE=eth1 TYPE=Ethernet BOOTPROTO=none ONBOOT=yes NM_CONTROLLED=no IPV6INIT=no MASTER=bond0 SLAVE=yes  3.3．Bond0に対するTagVLANの設定 VLAN10の設定
vi /etc/sysconfig/network-scripts/ifcfg-bond0.10  TYPE=&amp;quot;Ethernet&amp;quot; BOOTPROTO=none DEVICE=&amp;quot;bond0.</description>
    </item>
    
    <item>
      <title>Edgerouterでポート開放をしてみる</title>
      <link>https://yoneyan.dev/post/try-opening-the-port-with-edgerouter/</link>
      <pubDate>Fri, 22 Mar 2019 18:05:10 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/try-opening-the-port-with-edgerouter/</guid>
      <description>今回はEdgerouterでポート開放をコマンド操作でしていきます。
こちらのサイトを参考にさせていただきました。
https://qiita.com/maiani/items/b45b0505377401be083a
わかりにくい点などがありましたら、上記のサイトさんをご覧ください。
コマンドで設定していく 今回は以下のポートを開放していきます。
80/tcp 172.16.1.100
3389/tcp,3389/udp 172.16.1.10
1．ファイアウォールの設定 80/tcpの設定をしていきます。
set firewall name WAN_IN rule 50 description &amp;quot;80/tcp http&amp;quot; set firewall name WAN_IN rule 50 action accept set firewall name WAN_IN rule 50 destination address 172.16.1.100 set firewall name WAN_IN rule 50 destination port 80 set firewall name WAN_IN rule 50 protocol tcp  3389/tcpと3389/udpポートを設定します。
set firewall name WAN_IN rule 50 description &amp;quot;3389/tcp,3389/udp RDP&amp;quot; set firewall name WAN_IN rule 50 action accept set firewall name WAN_IN rule 50 destination address 172.</description>
    </item>
    
    <item>
      <title>EdgerouterでPPPoEの設定をする</title>
      <link>https://yoneyan.dev/post/set-pppoe-with-edgerouter/</link>
      <pubDate>Tue, 12 Mar 2019 00:06:47 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/set-pppoe-with-edgerouter/</guid>
      <description>Ubiquiti Networks Edgerouter ER-X（日本国内） Amazon  楽天市場  Yahooショッピング      みんな大好きEdgerouterでPPPoEの設定をしていきます。
この記事は、備忘録なので設定を変える必要がある部分は各自で変更お願いします。（間違っている可能性があるので、その際は指摘の方よろしくお願いいたします。）
環境 プロバイダ:eo光
サービス名:1ギガコース
WAN側ポート:eth0
設定していく 設定を適応する際はcommit
設定を保存する際はsave
コマンドが必要です。
1．基本的なPPPoEの設定 set interfaces ethernet eth0 description &amp;quot;PPPoE&amp;quot; set interfaces ethernet eth0 pppoe 0 default-route auto set interfaces ethernet eth0 pppoe 0 mtu 1454 set interfaces ethernet eth0 pppoe 0 name-server auto set interfaces ethernet eth0 pppoe 0 password **** set interfaces ethernet eth0 pppoe 0 user-id **** set interfaces ethernet eth0 pppoe 0 speed auto  2.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yoneyan.dev/post/try-using-ipv6-of-eo-with-edgerouter/</link>
      <pubDate>Fri, 08 Mar 2019 00:07:05 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/try-using-ipv6-of-eo-with-edgerouter/</guid>
      <description>Ubiquiti Networks Edgerouter ER-X（日本国内） Amazon
Edgerouter Xというルータを買ってしまったのですが、なかなかeo光のIPv6サービスに繋げるのにかなり翻弄したのでここに備忘録として残しておきます。（一応、繋ぐことはできたという記事です。）
注意：今回の設定ではIPv6のファイアウォールの設定をしていないので、セキュリティ的にかなり危ないので、実際に構築する方はご注意下さい。（当方もファイアウォール周りがあまりわかっていないので、分かり次第、別の記事にさせていただきます。）
前提条件 プロバイダーはK-opticomのeo光ネット1Gコース（ホームコース）を使用しております。
WAN:eth0
LAN:eth1
とします。
また、上の注意の点でも書きましたが、ファイアウォールを設定していないので、ご注意ください。
使えるようにしていく 1.インタフェースに設定を入れていく set interfaces ethernet eth0 pppoe 0 dhcpv6-pd rapid-commit enable set interfaces ethernet eth0 pppoe 0 dhcpv6-pd pd 1 interface eth1 service slaac set interfaces ethernet eth0 pppoe 0 dhcpv6-pd pd 1 prefix-length /64 set interfaces ethernet eth0 pppoe 0 ipv6 dup-addr-detect-transmits 1 set interfaces ethernet eth0 pppoe 0 ipv6 enable set protocols static interface-route6 ::/0 next-hop-interface &#39;pppoe0&#39;  これをやっていないせいでかなり時間をとりました。</description>
    </item>
    
    <item>
      <title>EdgeRouterでLAGとタグVLANを設定する</title>
      <link>https://yoneyan.dev/post/configure-lag-and-tagged-vlan-on-edgerouter/</link>
      <pubDate>Fri, 08 Feb 2019 01:45:05 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/configure-lag-and-tagged-vlan-on-edgerouter/</guid>
      <description>EdgerRouterでLAGの一種であるLACPとタグVLANを使ってみたので、設定方法を紹介させていただきます。
   Ubiquiti Networks Edgerouter ER-X（日本国内） Amazon  楽天市場  Yahooショッピング      それでは構築していきます。
今回はeth1とeth2をLACPでリンクアグリゲーションを行い、その中でVLAN100とVLAN200のタグVLANを使用するという前提で行います。
LACPの設定を行う まず、最初にLACPの設定を行っていきます。
1．bondインタフェースを作成する set interfaces bonding bond0 description &amp;quot;LAG Interface&amp;quot;  descriptionはbond0に対する名前なので各自で変更してください。
2．bondインタフェースの設定をする set interfaces bonding bond0 mode 802.3ad set interfaces bonding bond0 hash-policy layer2  ここでmode 802.3adとすることで、LACPの設定をすることが可能になります。他にも、active-backupやロードバランスができるtransmit-load-balanceというものも使えます。
LACPではhash-policyというものがあるので、ここではlayer2としておきます。
タグVLANの設定を行う 1．インタフェースの中にタグVLANを作成する set interfaces bonding bond0 vif 100 set interfaces bonding bond0 vif 200  100や200以外の他のタグVLANにしたいときは、数字を適切なものに変更してください。
今回はbondでのタグVLANの設定ですが、eth3のようなインタフェースにタグVLANを割り当てたい場合は、
set interfaces ethernet eth3 vif 100  このようにしてあげることで使えるようになります。</description>
    </item>
    
    <item>
      <title>RTX1200でeo光のIPv6を使えるようにする</title>
      <link>https://yoneyan.dev/post/make-it-possible-to-use-ipv6-of-eo-with-rtx1200/</link>
      <pubDate>Wed, 30 Jan 2019 17:17:30 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/make-it-possible-to-use-ipv6-of-eo-with-rtx1200/</guid>
      <description>みなさんRTX1200というyamahaのルータを持っていますか？
eo光が配布してくれるeo光多機能ルータというものがありますが、使いやすいのですが民生用ということもあり機能が限定されています。 また、安定性もそこまで正直なところそこまで良くないです。
ということで、今回はRTX1200でもeo光のIPv6を使えるようになるという記事を拝見させていただきましたので、当ブログでも紹介させていただきます。
参考にさせていただいた記事 http://sky.jp/sub218.html
作業開始 共通部分 ipv6 route default gateway pp 1 ipv6 prefix 1 dhcp-prefix@pp1::/64  pp部分 pp select 1 description pp PRV/PPPoE/0:eo pp keepalive interval 30 retry-interval=30 count=12 pp always-on on pppoe use lan2 pppoe auto disconnect off pp auth accept pap chap pp auth myname ID password ppp lcp mru on 1454 ppp ipcp ipaddress on ppp ipcp msext on ppp ccp type none ppp ipv6cp use on ip pp nat descriptor 1 ipv6 pp rip send off ipv6 pp dhcp service client ipv6 pp secure filter in 1010 1011 1012 2000 ipv6 pp secure filter out 3000 dynamic 100 101 102 103 104 105 106 pp enable 1  pppoeの設定箇所に以下のコンフィグを流し込む</description>
    </item>
    
    <item>
      <title>PowerConnectでVLANの設定をする</title>
      <link>https://yoneyan.dev/post/configure-vlan-with-powerconnect/</link>
      <pubDate>Fri, 21 Dec 2018 11:44:05 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/configure-vlan-with-powerconnect/</guid>
      <description>PowerConnect6248というものをバリバリ動かしている筆者です。
やっぱり、家庭では最低でも48ポート必要ですよね？
まあ、こいつのせいで電気代が掛かっているので対処法を考えていますが&amp;hellip;
Ciscoのスイッチとは設定方法がすこし異なるところもあるので、今回はその部分を説明させていただきます。
VLANの種類 VLANでの設定方法では以下の2つの種類があります。
 accessポート trunkポート  前半にaccessポート、後半にtrunkポートの設定方法について説明させていただきます。
Accessポートの設定編 Accessポートの設定方法を紹介します。
例として：1/g12ポートにVLAN100を割り当て、1/g13ポートのVLAN200と割り当てるとします。
 config vlan database vlan 100 vlan 200 exit interface ethernet 1/g12 switchport access vlan 100 exit interface ethernet 1/g13 switchport access vlan 200 exit  上記のコードでaccessポートの設定ができます。
vlan databaseで使うVLANを設定しないと文句を言われるので、注意して下さい。
Trunkポートの設定編 そもそも、trunkポートとは複数のVLANを一つのインタフェースで実現する際に使用します。
それでは設定方法を紹介します。
例として、1/g1をVLAN 5,10,20とします。
 config vlan database vlan 5 vlan 10 vlan 20 exit interface ethernet 1/g1 switchport mode trunk switchport trunk allowed vlan add 5,10,20 exit  このような感じで簡単に設定ができます。</description>
    </item>
    
    <item>
      <title>Cisco892WでAPファームウェアを初期化する方法</title>
      <link>https://yoneyan.dev/post/how-to-initialize-ap-firmware-on-cisco892w/</link>
      <pubDate>Sun, 09 Dec 2018 21:59:07 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/how-to-initialize-ap-firmware-on-cisco892w/</guid>
      <description>Cisco892WはAPファームウェアとルータ用ファームウェアが別れているなかなか変態仕様になっています。 初期化をどのようにするのかこの記事で紹介していきます。
そもそもCisco 892Wとは？ Cisco 892Wはルータとアクセスポイントが合体したものです。扱いとしてはルータになります。Cisco 892に無線機能がついただけのものです。
Cisco892Wはルータとアクセスポイントが合体していることもあり、ルータ用OSとアクセスポイント用のOSが分かれている特殊な機種です。
簡潔に言うと、ルータ用のファームウェアとアクセスポイント用のファームウェアは別々にあるということです。
そのこともあり、ルータだけでなくアクセスポイント側の知識もないとこのルータを触ることが難しいので気合をいれて構築していきます！
APファームウェアの初期化 これからいよいよAPファームウェアの初期化を行っていきます。
グローバルコンフィグレーションモードではなく特権モードで行います。
Router# &amp;lt;===特権モードはこんな感じ
Router(config)#&amp;lt;===グローバルコンフィグレーションモードはこんな感じ
service-module wlan-ap 0 reset  上記のコマンドを入力すると、
 Use reset only to recover from shutdown or failed state AP config will not be saved Do you want to reset?[confirm]  「本当にリセットするの？」と892W君が確認してくれるのでyと入力するとリセットが開始されます。
まとめ このような感じでAPファームウェアの初期化を行うことが可能となりました。
892Wの欠点はAP側の設定を大胆に間違ってしまう（パスワードがわからなくなったりなど）と、初期化するしか方法がなくなるので注意が必要です。 家庭用のものではルータ＋APが入っているのが出回っていますが、業務用の場合であればルータとAPが分かれている場合が多いです。 家庭用であれば、合体している方が便利というのが一番だと思いますが、難しいところです。
少しずつ、892WやAironet系のCiscoの無線機器の記事も出していく予定ですので、よろしくお願いします。</description>
    </item>
    
    <item>
      <title>CiscoルータでWANを冗長化する</title>
      <link>https://yoneyan.dev/post/redundant-wan-with-ciscorouter/</link>
      <pubDate>Thu, 06 Dec 2018 00:31:45 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/redundant-wan-with-ciscorouter/</guid>
      <description>関西ネットワークトラブルシュートワークショップ（略してKNTW）というものを我々が運営させていただいているのですが、その際のバックボーンネットワークとして実際に使ったネットワークです。
CiscoルータでWAN側の冗長化を行うために、HSRPというCisco独自のプロトコルを使用します。 また、デフォルトゲートウェイを冗長化するものとして、VRRPというプロトコルが存在しますが、今回はこれを使用しません。
今回は例として、Cisco 841Mを使って構築します。
VRRPの弱点 VRRPもHSRPと同様のCisco独自プロトコルですが、ルータの冗長化はできます。しかし、WAN側の冗長化ができないという欠点を持っています。
そこで、今回はWAN側の冗長化を目標にしているので、HSRPを使用します。
（VRRPでもできるのかもしれませんが知識不足で分かっておりません。）
Cisco以外の機種では&amp;hellip; HSRPはお得意のCisco独自プロトコルとなっています。他社のネットワーク機器では独自のプロトコル又は出来ない可能性が高いので気をつけてください。
構築していく 以下のようなトポ図で構築すると仮定します。
   上のルータをrouter1とし、下のルータをrouter2とします。
また、LAN側は同一ネットワークである必要があるので注意してください。
各ルータのインターフェースは下記の通りとします。
router1
WAN側：GigabitEthernet 0/5
LAN側：GigabitEthernet 0/0
router2
WAN側：GigabitEthernet 0/5
LAN側：GigabitEthernet 0/0
Router1の設定 LAN側のinterfaceに
 standby 10 ip 192.168.0.1 standby 10 priority 105 standby 10 preempt  を設定するだけです。
standby 10 ip 192.168.0.1の10の部分はHSRPのグループ番号なので適当な数字を入れても問題ありません。
priority 105の部分はどのルータを優先的に使うのかという設定です。
Router2の設定 LAN側のinterfaceに  standby 10 ip 192.168.0.2 standby 10 priority 100  を設定するだけです。
コンフィグの内容はrouter1に書いた内容と同じです。
まとめ VRRPでは物理的なルータの冗長化をすることしかできませんが、Cisco独自プロトコルになってしまいます。 しかし、HSRPを使うとWANの冗長化をすることが簡単にできるので、家庭でCiscoのルータでWANの冗長化をする際は是非参考にしていただければ幸いです。</description>
    </item>
    
    <item>
      <title>CentOSで無線から有線に変換する(1)</title>
      <link>https://yoneyan.dev/post/convert-wireless-to-wired-with-centos_1/</link>
      <pubDate>Tue, 20 Nov 2018 14:06:55 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/convert-wireless-to-wired-with-centos_1/</guid>
      <description>諸事情でどこかのイベントでバックボーンを構築をする際に無線から有線に変換する必要性が出てきたので、この記事ではその方法を紹介します。 トポ図 ルータ &amp;lt;&amp;mdash;&amp;mdash;&amp;mdash;-&amp;gt; CentOS &amp;lt;&amp;mdash;&amp;mdash;&amp;mdash;-&amp;gt; Client External Internal External(eth1),Internal(eth0)
設定をしてみる 1.firewallコマンド eth0をInternalゾーン
firewall-cmd --zone=internal --change-interface=eth0  eth1をExternalゾーン
firewall-cmd --zone=external --change-interface=eth1  永続化する時は、&amp;ndash;permanentをつけるといけます。
2.IPマスカレード firewall-cmd --zone=external --add-masquerade --permanent firewall-cmd --reload firewall-cmd --zone=external --query-masquerade cat /proc/sys/net/ipv4/ip_forward（「1」であれば有効） firewall-cmd --zone=internal --add-masquerade --permanent firewall-cmd --direct --add-rule ipv4 nat POSTROUTING 0 -o eth1 -j MASQUERADE firewall-cmd --direct --add-rule ipv4 filter FORWARD 0 -i eth0 -o eth1 -j ACCEPT firewall-cmd --direct --add-rule ipv4 filter FORWARD 0 -i eth1 -o eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT  3.</description>
    </item>
    
    <item>
      <title>CentOSでリンクアグリゲーションの設定をしてみる</title>
      <link>https://yoneyan.dev/post/try-setting-linkaggregation-on-centos/</link>
      <pubDate>Mon, 19 Nov 2018 01:29:33 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/try-setting-linkaggregation-on-centos/</guid>
      <description>今回はCentOSでIEEE 802.3ad規格のリンクアグリゲーションを構築してみます。 IEEE 802.3adとは国際で定められたリンクアグリゲーションの規格のことを指します。 この記事ではここからLAGと表記していきます。 この記事ではCentOSにリンクアグリゲーションの設定を最初からやっていきます。
リンクアグリゲーションとは？ この記事を見てくださっている方はおわかりだと思いますが、LAGとはLANケーブルを数本束ねて高速化＆耐障害性に優れているものになっています。 例：1GbEのケーブルを2本挿して、LAGにすると、２Gbpsの帯域まで確保することが可能になります。 もし、一本でも抜けたり故障などで切断されても、冗長化もされているので通常の１Gbpsで通信します。 このように、絶対止まってほしくないものやNASのように速度が求められていて、止まってほしくないもので使うときに非常に必要になる技術です。
設定方法 設定方法として、以下の2つがあります。
 nmtui（GUI） nmcli（CUI)  今回はこの内のnmtuiを使った設定方法を紹介します。 nmtuiとnmcliはNetworkManagerの管理ツール的なものと思っていただいても間違っていないです。 環境はCentOS7.5を使用しています。
設定していく 1.nmtuiを起動する sudo nmtui
恐らく、管理者権限ではないと設定出来ない可能性が高いです。  

こんな感じのネットワークの設定画面が表示されます。
2.LAGの設定をしていく Edit a connectionを選択してから、Addを選択すると、下のようなものが出てきます。
   LAGを使う場合はBondを選択します。
3.bondの設定をしていく    AddでEthernetを選択し、Device名を手打ちでします。 それから、Modeで802.3adを選択すると、リンクアグリゲーションを使うことが出来るようになります。 IPv4を固定にしたい場合は、Manualですることができます。 最後にOKを選択し、ダイアログを閉じます。 これでLAGを使用することが可能になります。
4.IPアドレスを取得＆pingが通るか確認する google.co.jpにpingが通るか確認するには
ping google.co.jp  IPアドレスが取得されているか確認したい場合は
ip addr  これで確認することが可能になります。</description>
    </item>
    
    <item>
      <title>CentOSのOpenVPNサーバーを構築してみる</title>
      <link>https://yoneyan.dev/post/try-building-a-centos-openvpn-server/</link>
      <pubDate>Fri, 07 Sep 2018 20:00:06 +0900</pubDate>
      
      <guid>https://yoneyan.dev/post/try-building-a-centos-openvpn-server/</guid>
      <description>OpenVPNを使ってVPSと自宅のpfsenseにつないでみました。
この記事の構成 このテーマは3つに分けて、記事にしていく予定です。
その１:VPS側（サーバー側）の設定
その２:pfsense側（クライアント側）の設定
その３:ファイアーウォールの設定
VPS側で
OpenVPNの設定をしていく この記事ではCentOSを使った紹介をしていきます。
最初にやっておくこと
CentOSにepelのレポジトリを使えるようにしておきましょう
関係するパッケージをインストールする yum --enablerepo=epel -y install openvpn easy-rsa  フォルダを作る mkdir /etc/openvpn/easy-rsa  フォルダ群をコピー cp /usr/share/easy-rsa/***/* /etc/openvpn/easy-rsa/ -R  米印の部分にはeasy-rsaのバージョンを入れてください。（執筆時は3.03です。）
認証局を作る cd /etc/openvpn/easy-rsa ./easyrsa init-pki ./easyrsa build-ca ./easyrsa gen-dh cd /etc/openvpn openvpn --genkey --secret /etc/openvpn/ta.key  詳しくはよくわかりませんが、これだけで認証局が超簡単に作ることができます。
./easyrsa build-caを実行すると&amp;hellip;
Enter PEM pass phrase:  こういう物が出てくるので、適当に自分で考えてパスフレーズを入力します。
サーバー側の証明書を作成 パスワードがめんどくさいのでパスワードなし(no pass)にします。
cd /etc/openvpn/easy-rsa ./easyrsa build-server-full server nopass  Server側のkey:/etc/openvpn/easy-rsa/pki/private/server.key
Server側のcrt:/etc/openvpn/easy-rsa/pki/issued/server.crt
クライアント側の証明書を作成 こちらもパスワードがめんどくさいのでnopassにします。</description>
    </item>
    
  </channel>
</rss>